import React, { createContext, useState, useEffect, useContext } from 'react';
import { localAuthService, LocalUser } from '../services/localAuth';
import { handleError } from '../utils/errorHandler';

interface AuthContextType {
  user: LocalUser | null;
  signIn: (email: string, password: string) => Promise<{ data: { user: LocalUser } | null; error: Error | null }>;
  signOut: () => Promise<void>;
  updateUser: (userId: string, updates: Partial<LocalUser>) => Promise<LocalUser | null>;
  updateUserCredentials: (userId: string, currentPassword: string, newPassword: string) => Promise<boolean>;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<LocalUser | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkUser = async () => {
      console.log('üîÑ Iniciando verifica√ß√£o de usu√°rio...');
      
      // Pequeno atraso para garantir que o localStorage esteja dispon√≠vel
      await new Promise(resolve => setTimeout(resolve, 100));
      
      try {
        // Verificar se h√° um usu√°rio salvo no localStorage
        const storedUser = localStorage.getItem('user');
        console.log('üíæ Dados do usu√°rio no localStorage:', storedUser ? storedUser.substring(0, 100) + '...' : 'null');
        
        if (storedUser) {
          const parsedUser = JSON.parse(storedUser);
          console.log('üë§ Usu√°rio atual definido:', parsedUser?.id || 'null');
          console.log('üìß Email do usu√°rio:', parsedUser?.email || 'null');
          
          // Verificar se h√° uma vers√£o atualizada do usu√°rio no localStorage
          if (parsedUser.id) {
            console.log('üîç Verificando se h√° vers√£o atualizada do usu√°rio:', parsedUser.id);
            const updatedUser = localAuthService.getUserById(parsedUser.id);
            if (updatedUser) {
              console.log('üîÑ Usu√°rio atualizado encontrado:', updatedUser);
              setUser(updatedUser);
              // Atualizar o localStorage com a vers√£o mais recente
              localStorage.setItem('user', JSON.stringify(updatedUser));
              console.log('üíæ Usu√°rio atualizado salvo no localStorage');
            } else {
              console.log('‚ÑπÔ∏è Nenhuma vers√£o atualizada encontrada, usando usu√°rio do localStorage');
              setUser(parsedUser);
            }
          } else {
            console.log('‚ÑπÔ∏è Usu√°rio sem ID, usando dados do localStorage');
            setUser(parsedUser);
          }
        } else {
          console.log('‚ÑπÔ∏è Nenhum usu√°rio encontrado no localStorage');
          setUser(null);
        }
      } catch (error: any) {
        console.error('‚ùå Erro ao verificar usu√°rio:', error);
        // Em caso de erro, garantir que o usu√°rio seja definido como null
        setUser(null);
      } finally {
        console.log('‚úÖ Verifica√ß√£o de usu√°rio conclu√≠da. Usu√°rio atual no estado:', user);
        setLoading(false);
      }
    };
    
    checkUser();
  }, []);
  
  const signIn = async (email: string, password: string) => {
    try {
      console.log('üîê Tentando login:', email);
      const result = await localAuthService.login(email, password);
      
      if (result) {
        console.log('‚úÖ Login bem-sucedido:', result.id);
        setUser(result);
        // Salvar usu√°rio no localStorage para persist√™ncia
        try {
          localStorage.setItem('user', JSON.stringify(result));
          console.log('üíæ Usu√°rio salvo no localStorage com ID:', result.id);
          
          // Verificar se o usu√°rio foi salvo corretamente
          const savedUser = localStorage.getItem('user');
          console.log('üîç Verifica√ß√£o de salvamento do usu√°rio:', savedUser ? savedUser.substring(0, 100) + '...' : 'null');
        } catch (storageError) {
          console.error('‚ùå Erro ao salvar usu√°rio no localStorage:', storageError);
        }
        return { data: { user: result }, error: null };
      } else {
        console.log('‚ùå Credenciais inv√°lidas para:', email);
        return { data: null, error: new Error('Credenciais inv√°lidas') };
      }
    } catch (error: any) {
      console.error('üí• Erro no login:', error);
      return { data: null, error };
    }
  };

  const signOut = async () => {
    try {
      console.log('üö™ Realizando logout. Usu√°rio atual:', user);
      setUser(null);
      // Remover usu√°rio do localStorage
      try {
        localStorage.removeItem('user');
        console.log('üíæ Usu√°rio removido do localStorage');
        
        // Verificar se o usu√°rio foi removido corretamente
        const savedUser = localStorage.getItem('user');
        console.log('üîç Verifica√ß√£o ap√≥s remo√ß√£o do usu√°rio:', savedUser);
      } catch (storageError) {
        console.error('‚ùå Erro ao remover usu√°rio do localStorage:', storageError);
      }
      console.log('‚úÖ Logout conclu√≠do');
    } catch (error: any) {
      console.error('‚ùå Erro no logout:', error);
      handleError(error, 'auth', true);
      throw error;
    }
  };

  const updateUser = async (userId: string, updates: Partial<LocalUser>) => {
    try {
      console.log('üîÑ Atualizando usu√°rio:', userId, updates);
      const updatedUser = await localAuthService.updateUserProfile(userId, updates);
      
      // Atualizar o usu√°rio no estado se for o usu√°rio atual
      if (user && user.id === userId && updatedUser) {
        const newUser = {
          ...user,
          ...updates,
          updated_at: updatedUser.updated_at
        };
        setUser(newUser);
        // Atualizar no localStorage
        localStorage.setItem('user', JSON.stringify(newUser));
        console.log('üíæ Usu√°rio atualizado no localStorage');
      }
      
      return updatedUser;
    } catch (error: any) {
      handleError(error, 'auth', true);
      throw error;
    }
  };

  const updateUserCredentials = async (userId: string, currentPassword: string, newPassword: string) => {
    try {
      console.log('üîÑ Atualizando credenciais do usu√°rio:', userId);
      const success = await localAuthService.updateUserCredentials(userId, currentPassword, newPassword);
      
      if (success && user && user.id === userId) {
        // Se a atualiza√ß√£o foi bem-sucedida e √© o usu√°rio atual, precisamos atualizar o hash da senha
        // Nota: Na pr√°tica, n√£o devemos armazenar o hash da senha no localStorage por motivos de seguran√ßa
        // Mas para fins de demonstra√ß√£o neste sistema local, vamos atualizar
        console.log('‚úÖ Credenciais atualizadas com sucesso');
      }
      
      return success;
    } catch (error: any) {
      handleError(error, 'auth', true);
      throw error;
    }
  };

  return (
    <AuthContext.Provider value={{ user, signIn, signOut, updateUser, updateUserCredentials, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};